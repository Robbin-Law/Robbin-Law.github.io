[
  {
    "objectID": "semiconductors/section3/topic6/index.html",
    "href": "semiconductors/section3/topic6/index.html",
    "title": "Filters",
    "section": "",
    "text": "Lesson Solutions Excel Spread Sheet\nPage 1 by Ross Taylor\nPage 2 by Ross Taylor\nPage 3 by Ross Taylor\nPage 4 by Ross Taylor"
  },
  {
    "objectID": "semiconductors/section3/topic4/index.html",
    "href": "semiconductors/section3/topic4/index.html",
    "title": "Instrument Amps",
    "section": "",
    "text": "Page 1 Instrumentation Amplifiers by Ross Taylor\nPage 2 Instrumentation Amplifiers by Ross Taylor",
    "crumbs": [
      "Semiconductors",
      "Op Amps",
      "Instrument Amps"
    ]
  },
  {
    "objectID": "semiconductors/section3/topic2/index.html",
    "href": "semiconductors/section3/topic2/index.html",
    "title": "Diff Amps",
    "section": "",
    "text": "Page 1 Differential Amplifiers by Ross Taylor\nPage 2 Differential Offset Compensation by Ross Taylor",
    "crumbs": [
      "Semiconductors",
      "Op Amps",
      "Diff Amps"
    ]
  },
  {
    "objectID": "semiconductors/section3/topic1/assets/d-Op-Amp-Configs-RLaw/Op-Amp-Configs-RLaw.html",
    "href": "semiconductors/section3/topic1/assets/d-Op-Amp-Configs-RLaw/Op-Amp-Configs-RLaw.html",
    "title": "Op Amp Configurations",
    "section": "",
    "text": "Rules:\n\nNo current can flow in or out of the + or - inputs as Rin = infinite.\nCurrent can flow in or out of the output as Rout = 0.\nThere is a virtual connection between the two inputs so they are the same Voltage.\n\n\nInverting\n\n\\(I_{Ri} = I_{Rf}\\)\n\\(V_{in}/Ri = -V_{out}/Rf\\)\n\\(V_{out}/V_{in} = -Rf/Ri\\)\n\n\nNon-Inverting\n\n\\(I_{Ri} = I_{Rf}\\)\n\\(V_{in}/Ri = (V_{out} - V_{in})/Rf\\)\n\\(V_{in}/Ri = (V_{out})(1/Rf) - (V_{in})(1/Rf)\\)\n\\(V_{in}/Ri + (V_{in})(1/Rf) = (V_{out})(1/Rf)\\)\n\\((V_{in})(1/Ri + 1/Rf) = (V_{out})(1/Rf)\\)\n\\((Rf)(1/Ri + 1/Rf) = V_{out}/V_{in}\\)\n\\(V_{out}/V_{in} = Rf/Ri + 1\\)"
  },
  {
    "objectID": "semiconductors/section2/topic3/index.html",
    "href": "semiconductors/section2/topic3/index.html",
    "title": "FET’s",
    "section": "",
    "text": "Lesson Solutions Excel Spread Sheet\nPage 1 FET’s General by Ross Taylor\nPage 2 JFET’s by Ross Taylor\nPage 3 MOSFET’s by Ross Taylor\nPage 4 Enhancement Mode MOSFET’s by Ross Taylor\nZVN2110A N-Channel E-MOSFET Datasheet\nZVP2110A P-Channel E-MOSFET Datasheet",
    "crumbs": [
      "Semiconductors",
      "Transistors",
      "FET's"
    ]
  },
  {
    "objectID": "semiconductors/section2/topic3/index.html#field-effect-transistors-fets",
    "href": "semiconductors/section2/topic3/index.html#field-effect-transistors-fets",
    "title": "FET’s",
    "section": "",
    "text": "Lesson Solutions Excel Spread Sheet\nPage 1 FET’s General by Ross Taylor\nPage 2 JFET’s by Ross Taylor\nPage 3 MOSFET’s by Ross Taylor\nPage 4 Enhancement Mode MOSFET’s by Ross Taylor\nZVN2110A N-Channel E-MOSFET Datasheet\nZVP2110A P-Channel E-MOSFET Datasheet",
    "crumbs": [
      "Semiconductors",
      "Transistors",
      "FET's"
    ]
  },
  {
    "objectID": "semiconductors/section2/topic1/index.html",
    "href": "semiconductors/section2/topic1/index.html",
    "title": "BJT’s",
    "section": "",
    "text": "Lesson Solutions Excel Spread Sheet\nPage 1 BJT Theory by Ross Taylor\nPage 2 BJT Models by Ross Taylor\nPage 3 BJT Switch Circuits by Ross Taylor\nPage 4 Amplifier Biasing Circuits by Ross Taylor",
    "crumbs": [
      "Semiconductors",
      "Transistors",
      "BJT's"
    ]
  },
  {
    "objectID": "semiconductors/section2/topic1/index.html#bipolar-junction-transistors-bjts",
    "href": "semiconductors/section2/topic1/index.html#bipolar-junction-transistors-bjts",
    "title": "BJT’s",
    "section": "",
    "text": "Lesson Solutions Excel Spread Sheet\nPage 1 BJT Theory by Ross Taylor\nPage 2 BJT Models by Ross Taylor\nPage 3 BJT Switch Circuits by Ross Taylor\nPage 4 Amplifier Biasing Circuits by Ross Taylor",
    "crumbs": [
      "Semiconductors",
      "Transistors",
      "BJT's"
    ]
  },
  {
    "objectID": "semiconductors/section1/topic2/index.html",
    "href": "semiconductors/section1/topic2/index.html",
    "title": "Rectifiers",
    "section": "",
    "text": "This group of notes will cover the theory needed for Lab 2\n\nLesson Solutions Excel Spread Sheet\nPage 1 General by Ross Taylor\nPage 2 Half Wave by Ross Taylor\nPage 3 Full Wave Center Tapped by Ross Taylor\nPage 4 Full Wave Bridge by Ross Taylor\nPage 5 Full Wave Bridge Negative by Ross Taylor",
    "crumbs": [
      "Semiconductors",
      "Diodes",
      "Rectifiers"
    ]
  },
  {
    "objectID": "semiconductors/index.html",
    "href": "semiconductors/index.html",
    "title": "Semiconductors",
    "section": "",
    "text": "Projects (P); 8 total; 64% of final mark; 8% each.\nAll Projects are due on Sunday of the week at 11:59 PM.\nLabs (L); 9 total; 18% of final mark; 2% each.\nAll Labs are due on Sunday of the week at 11:59 PM.\nExams (E); 3 total; 18% of final mark; 6% each.\nAll Exams are done during class time.\n\n\n\n\n\n\n\n\n\n\n\nWeek\nAssessment\nDay1 (2 hrs)\nDay2 (2 hrs)\nDay3 (1 hr)\n\n\n\n\n1-J06\nL1-Diodes\n\nIntro/Diode-Physics\nDiode-Models\n\n\n2-J13\nL2-Rectifiers\nRectifiers\nRectifiers\nRectifiers\n\n\n3-J20\nL3-Filtering/Reg\nFiltering/Regulation\nFiltering/Regulation\nFiltering/Regulation\n\n\n4-J27\nP1-Power-Supply\nBJT-Intro\nBJT-Switching\nBJT-Biasing\n\n\n5-F03\nL4-BJT-Switch/Bias\nBJT-Totem-Pole\nBJT-H-Bridge\nBJT-H-Bridge\n\n\n6-F10\nP2-TPole/HBridge L5-FET-Switching\nFET-Intro\nFET-Switching\nExam1-Diode-Apps\n\n\nF17\n\nREADING-WEEK\nREADING-WEEK\nREADING-WEEK\n\n\n7-F24\nP3-Transistors L6-OpAmps\nOpAmps-Intro\nOpAmps-Configs\nOpAmps-Diff-Amps\n\n\n8-M03\nP4-Summing-Amps\nSumming-Amps\nSumming-Amps\nExam2-Transistor-Apps\n\n\n9-M10\nP5-Instrument-Amps\nInstrument-Amps\nInstrument-Amps\nInstrument-Amps\n\n\n10-M17\nL7-DAC P7-Adv-Filters/DAC DAC part only\nDig-Analog-Con\nDig-Analog-Con\nDig-Analog-Con\n\n\n11-M24\nP6-Issues/Basic-Filters\nOpAmp-Issues\nBasic-Filters\nBasic-Filters\n\n\n12-M31\nP7-Adv-Filters/DAC Adv-Filters part only\nAdv-Filters\nAdv-Filters\nAdv-Filters\n\n\n13-A07\nL8-Comparators\nComparators\nComparators\nExam3-OpAmp-Apps\n\n\n14-A14\nL9-ADC\nADC\nADC\nEASTER\n\n\n15-A21\nP8-Comparators-ADC\nEASTER\nP8\nP8",
    "crumbs": [
      "Semiconductors"
    ]
  },
  {
    "objectID": "semiconductors/index.html#calendar-2025-winter",
    "href": "semiconductors/index.html#calendar-2025-winter",
    "title": "Semiconductors",
    "section": "",
    "text": "Projects (P); 8 total; 64% of final mark; 8% each.\nAll Projects are due on Sunday of the week at 11:59 PM.\nLabs (L); 9 total; 18% of final mark; 2% each.\nAll Labs are due on Sunday of the week at 11:59 PM.\nExams (E); 3 total; 18% of final mark; 6% each.\nAll Exams are done during class time.\n\n\n\n\n\n\n\n\n\n\n\nWeek\nAssessment\nDay1 (2 hrs)\nDay2 (2 hrs)\nDay3 (1 hr)\n\n\n\n\n1-J06\nL1-Diodes\n\nIntro/Diode-Physics\nDiode-Models\n\n\n2-J13\nL2-Rectifiers\nRectifiers\nRectifiers\nRectifiers\n\n\n3-J20\nL3-Filtering/Reg\nFiltering/Regulation\nFiltering/Regulation\nFiltering/Regulation\n\n\n4-J27\nP1-Power-Supply\nBJT-Intro\nBJT-Switching\nBJT-Biasing\n\n\n5-F03\nL4-BJT-Switch/Bias\nBJT-Totem-Pole\nBJT-H-Bridge\nBJT-H-Bridge\n\n\n6-F10\nP2-TPole/HBridge L5-FET-Switching\nFET-Intro\nFET-Switching\nExam1-Diode-Apps\n\n\nF17\n\nREADING-WEEK\nREADING-WEEK\nREADING-WEEK\n\n\n7-F24\nP3-Transistors L6-OpAmps\nOpAmps-Intro\nOpAmps-Configs\nOpAmps-Diff-Amps\n\n\n8-M03\nP4-Summing-Amps\nSumming-Amps\nSumming-Amps\nExam2-Transistor-Apps\n\n\n9-M10\nP5-Instrument-Amps\nInstrument-Amps\nInstrument-Amps\nInstrument-Amps\n\n\n10-M17\nL7-DAC P7-Adv-Filters/DAC DAC part only\nDig-Analog-Con\nDig-Analog-Con\nDig-Analog-Con\n\n\n11-M24\nP6-Issues/Basic-Filters\nOpAmp-Issues\nBasic-Filters\nBasic-Filters\n\n\n12-M31\nP7-Adv-Filters/DAC Adv-Filters part only\nAdv-Filters\nAdv-Filters\nAdv-Filters\n\n\n13-A07\nL8-Comparators\nComparators\nComparators\nExam3-OpAmp-Apps\n\n\n14-A14\nL9-ADC\nADC\nADC\nEASTER\n\n\n15-A21\nP8-Comparators-ADC\nEASTER\nP8\nP8",
    "crumbs": [
      "Semiconductors"
    ]
  },
  {
    "objectID": "semiconductors/index.html#general-resources",
    "href": "semiconductors/index.html#general-resources",
    "title": "Semiconductors",
    "section": "General Resources",
    "text": "General Resources\n\nCMPE1400 Lessons, Projects, Labs, and SA’s with NO ANSWERS by Ross Taylor\nCMPE1400 Formula Sheet\nSemiconductors by Circuit Bread\n\nyoutube video playlist; first 12 are on diodes, next 9 are on transistors.\n\nTransistors, How do they work by Lesics\n\nyoutube video 6.52 min\n\nWhy it was almost impossible to make the blue LED by Veritasum\n\nyoutube video 33.44 min; very good history lesson with great animations.",
    "crumbs": [
      "Semiconductors"
    ]
  },
  {
    "objectID": "embedded-systems/section5/topic3/index.html",
    "href": "embedded-systems/section5/topic3/index.html",
    "title": "ICA",
    "section": "",
    "text": "ICA",
    "crumbs": [
      "Embedded-Systems",
      "RTI",
      "ICA"
    ]
  },
  {
    "objectID": "embedded-systems/section5/topic1/index.html",
    "href": "embedded-systems/section5/topic1/index.html",
    "title": "Interrupts & RTI",
    "section": "",
    "text": "Intro to Interrupts Notes pdf 2pgs\n\n\nIntro to Interrupts Document Summary\n\nInterrupt Vector Table: The MC9S12XDP512 uses an interrupt vector table to store the addresses of interrupt service routines (ISRs). Each interrupt source has a specific vector address in this table. Interrupt Priority: Interrupts are prioritized based on their vector number. Lower vector numbers have higher priority, meaning they are serviced before higher-numbered vectors.\nGlobal Interrupt Masking: The microcontroller can globally enable or disable interrupts using the EnableInterrupts and DisableInterrupts macros. This is managed by setting or clearing the I bit in the Condition Code Register (CCR).\nNon-Maskable Interrupts: Certain critical interrupts, known as non-maskable interrupts, cannot be disabled and must always be serviced. Local Interrupt Masking: Individual interrupts can be enabled or disabled by setting or clearing specific bits in their corresponding control registers. For example, enabling the interrupt for PIT1 involves setting BIT1 in the relevant register.\nInterrupt Handling Process: When an interrupt occurs, the MCU saves the current program counter (PC) and status registers, executes the ISR, and then restores the saved PC and status registers to resume normal program execution.\nRTI Notes pdf 3pgs\nRTI Notes by Carlos Estays pdf 2pgs\nrti.h",
    "crumbs": [
      "Embedded-Systems",
      "RTI",
      "Interrupts & RTI"
    ]
  },
  {
    "objectID": "embedded-systems/section4/topic2/index.html",
    "href": "embedded-systems/section4/topic2/index.html",
    "title": "ICA06 Clock",
    "section": "",
    "text": "ICA06 Clock Specs",
    "crumbs": [
      "Embedded-Systems",
      "PLL",
      "ICA06 Clock"
    ]
  },
  {
    "objectID": "embedded-systems/section3/topic3/index.html",
    "href": "embedded-systems/section3/topic3/index.html",
    "title": "ICA05 sw_led Library",
    "section": "",
    "text": "Switch LED Port Notes\nSwitch States Diagram\nICA05 Specs\nICA05 Part 1 Demo\nICA05 Part 2 Demo\nICA05 Part 3 Demo\nCompilation Unit Basics by Simon Walker\nsw_led.h\nThe following .c file is only part of the solution. You must add to this file and then change the name to sw_led.c for things to work properly.\nsw_led_partial.c",
    "crumbs": [
      "Embedded-Systems",
      "GPIO",
      "ICA05 sw_led Library"
    ]
  },
  {
    "objectID": "embedded-systems/section3/topic1/index.html",
    "href": "embedded-systems/section3/topic1/index.html",
    "title": "ICA03 Bitwise Ops",
    "section": "",
    "text": "Switch LED Port Notes\nICA03 Bitwise Operations Specs\nICA03 Bitwise Operations Template.c",
    "crumbs": [
      "Embedded-Systems",
      "GPIO",
      "ICA03 Bitwise Ops"
    ]
  },
  {
    "objectID": "embedded-systems/section2/topic5/index.html",
    "href": "embedded-systems/section2/topic5/index.html",
    "title": "ICA02 Code Migration",
    "section": "",
    "text": "ICA02 Code Migration from C# to C Specs\n\n\n\nC# Program.cs for ICA02 to download\nUse the same procedure outlined for ICA01 to create a new project in the ICAs folder of your local workbook repo, but name it ICA02.\nIn VSCode change the main.c file of this new project to solve the problem outlined in the specs document.\nThe intention of this ICA02 is to convert the Program.cs C# program into a C program that will run on the micro board.",
    "crumbs": [
      "Embedded-Systems",
      "Intro to the Micro",
      "ICA02 Code Migration"
    ]
  },
  {
    "objectID": "embedded-systems/section2/topic4/index.html",
    "href": "embedded-systems/section2/topic4/index.html",
    "title": "ICA01 Program Flow",
    "section": "",
    "text": "Odd Things about Code Warrior\nICA01 Program Workflow",
    "crumbs": [
      "Embedded-Systems",
      "Intro to the Micro",
      "ICA01 Program Flow"
    ]
  },
  {
    "objectID": "embedded-systems/section2/topic4/index.html#procedure-to-create-a-new-code-warrior-project",
    "href": "embedded-systems/section2/topic4/index.html#procedure-to-create-a-new-code-warrior-project",
    "title": "ICA01 Program Flow",
    "section": "Procedure to Create a New Code Warrior Project",
    "text": "Procedure to Create a New Code Warrior Project\n\nWhen you open CodeWarrior a Startup dialog box should appear, if not go to File/Start Dialog…\nFrom the Startup Dialog box click Create New Project.\nThen under Select the derivative to use choose HCS12XD Family/MC9S12XDP512\nAlso choose USBDM in the Connections box. Then click next.\nThen choose Single Core, and click next.\nThen make sure the C box is checked and all others not.\nChange the name of the project to something that makes sense for example ICA01.\nChange the place to store the project to the ICAs folder in your workbook repo. Click next.\n\nRemember This - The only way to tell where the project is to be stored is when creating the project. You cannot save as the project as a whole via the IDE anywhere else after it has been created.\n\nNo need to add existing files so click next.\nWe want None for Rapid Dev Options. Click next.\nChoose ANSI Startup Code, Small Memory Model, and IEEE32 for both float and double. Click next.\nFinally check NO to PC-lint. Click Finish.",
    "crumbs": [
      "Embedded-Systems",
      "Intro to the Micro",
      "ICA01 Program Flow"
    ]
  },
  {
    "objectID": "embedded-systems/section2/topic4/index.html#procedure-to-download-a-project-to-code-warrior",
    "href": "embedded-systems/section2/topic4/index.html#procedure-to-download-a-project-to-code-warrior",
    "title": "ICA01 Program Flow",
    "section": "Procedure to download a project to Code Warrior",
    "text": "Procedure to download a project to Code Warrior\nNow that the project has been created and stored in your local workbook repo, open it in VSCode as we will want to change the main.c file in VSCode to reflect the problem we are solving.\n\nAfter you have changed main.c in VSCode make sure to save your changes, so we can then download the project to our micro board and run the program in main.c.\nFrom the project root folder that is in the ICAs folder, right click and via the context sensitive menu choose Open in File Explorer.\n\n\n\nThen double click on the file called PROJECTNAME.mcp. This will load the whole project into the Code Warrior IDE. You may have to search for where the IDE is on your machine. By default that location will be C:\\Program Files (x86)\\Freescale\\CWS12v5.1\\bin\\IDE.exe. You may have located the Code Warrior software somewhere else when you installed the software.",
    "crumbs": [
      "Embedded-Systems",
      "Intro to the Micro",
      "ICA01 Program Flow"
    ]
  },
  {
    "objectID": "embedded-systems/section2/topic4/index.html#procedure-to-run-a-program-in-code-warrior",
    "href": "embedded-systems/section2/topic4/index.html#procedure-to-run-a-program-in-code-warrior",
    "title": "ICA01 Program Flow",
    "section": "Procedure to run a program in Code Warrior",
    "text": "Procedure to run a program in Code Warrior\nNow that the project is loaded into Code Warrior we can compile and run it in our micro board.\n\nIn CodeWarrior double click on the main.c file so you can see the program that you are about to run on the micro board.\nIn CodeWarrior, start the Real-Time Debugger by clicking the slanted green arrow. This will compile and load the program into the micro board.\nA USBDM Settings dialog box may come up, if so click on Open BDM to connect to the micro board via the USBDM module. You have the option to not show the dialog box in the future, but often this does not work.\nClick on OK, once or twice until the program is downloaded to the micro board.\nRun the program by clicking the horizontal green Start arrow.\nClick the red T symbol to halt the program. After you do this you can single step thru the code, and/or continue by clicking the green start arrow again.\nClick the red Reset Target arrow to reset the board. Only do this when you are ready to close the debugger, which you would do by clicking the exit symbol at the top right of the window.\nAt this point you would go back to VSCode and edit main.c as needed, save your work, and then go back to CodeWarrior. When you do this, CodeWarrior should realize that the main.c file has been changed and ask to update, upon which you would. Then you could run the program in the debugger again. There is another document in the future of this course that will show you how to set breakpoints etc. to properly debug your program.\nYou would do this cycle of editing in VSCode, saving in VSCode, switching to CodeWarrior, and debugging the program, until you are satisfied that your program solves the problem at hand.\n\nVERY IMPORTANT - You must close out of CodeWarriors debug window and the main CodeWarrior window before committing and pushing your solution to github.\n\nFinally you would commit your changes on the local machine and push to github.",
    "crumbs": [
      "Embedded-Systems",
      "Intro to the Micro",
      "ICA01 Program Flow"
    ]
  },
  {
    "objectID": "embedded-systems/section2/topic3/index.html",
    "href": "embedded-systems/section2/topic3/index.html",
    "title": "Data Sheets",
    "section": "",
    "text": "Odd Things about Code Warrior",
    "crumbs": [
      "Embedded-Systems",
      "Intro to the Micro",
      "Data Sheets"
    ]
  },
  {
    "objectID": "embedded-systems/section2/topic2/index.html",
    "href": "embedded-systems/section2/topic2/index.html",
    "title": "Micro Board Resources",
    "section": "",
    "text": "2250 Notes by Simon 68 pages PDF\nMicro Cheat Sheet 2 pages PDF\nOld Note Package CP1503 178 pages PDF\nMC9S12XDP512RMV2 Reference LITTLE PINK 36 pages PDF\nMC9S12XDP512RMV2 Data Sheet BIG PINK 1348 pages PDF\nFreescale Documentation WEBSITE\nDev Board Schematics 5 pages PDF",
    "crumbs": [
      "Embedded-Systems",
      "Intro to the Micro",
      "Micro Board Resources"
    ]
  },
  {
    "objectID": "embedded-systems/section2/topic1/assets/Odd-Things-about-CodeWarrior.html",
    "href": "embedded-systems/section2/topic1/assets/Odd-Things-about-CodeWarrior.html",
    "title": "Odd Things about the CodeWarrior IDE",
    "section": "",
    "text": "Use the project wizard provided with the IDE to quickly create new projects. The wizard creates everything needed for a minimal, ready-to-run project. Use the created project as a foundation upon which to add features for each new project.\nChoose File &gt; New Project.\n\nThe New Project Wizard opens.\nEnter a project name in the Project Name field and set the Location for the new project.\n\n\n\n\nCodeWarrior projects whose names end in .mcp are cross-platform. However, the object code stored inside each project folder is not cross-platform. Use these procedures to properly open the project on a different host computer.\n\nCopy the project folder from the original host to the new host.\nDelete the Data folder inside the newly copied project folder.\nOpen the newly copied project on the new host IDE.\nRecompile the project to generate new object code.\n\n\n\n\nThe IDE automatically saves projects and updates project information after performing these actions:\n\nClosing the project.\nApplying or saving a preference or target-setting option\nAdding, deleting, or compiling a file.\nEditing group information.\nRemoving or compacting object code.\nQuitting the IDE.\n\nRemember This - The only way to tell where the project is to be stored is when creating the project. You cannot save as the project as a whole via the IDE anywhere else after it has been created."
  },
  {
    "objectID": "embedded-systems/section2/topic1/assets/Odd-Things-about-CodeWarrior.html#creating-new-projects-using-wizard",
    "href": "embedded-systems/section2/topic1/assets/Odd-Things-about-CodeWarrior.html#creating-new-projects-using-wizard",
    "title": "Odd Things about the CodeWarrior IDE",
    "section": "",
    "text": "Use the project wizard provided with the IDE to quickly create new projects. The wizard creates everything needed for a minimal, ready-to-run project. Use the created project as a foundation upon which to add features for each new project.\nChoose File &gt; New Project.\n\nThe New Project Wizard opens.\nEnter a project name in the Project Name field and set the Location for the new project."
  },
  {
    "objectID": "embedded-systems/section2/topic1/assets/Odd-Things-about-CodeWarrior.html#opening-projects-created-on-other-hosts",
    "href": "embedded-systems/section2/topic1/assets/Odd-Things-about-CodeWarrior.html#opening-projects-created-on-other-hosts",
    "title": "Odd Things about the CodeWarrior IDE",
    "section": "",
    "text": "CodeWarrior projects whose names end in .mcp are cross-platform. However, the object code stored inside each project folder is not cross-platform. Use these procedures to properly open the project on a different host computer.\n\nCopy the project folder from the original host to the new host.\nDelete the Data folder inside the newly copied project folder.\nOpen the newly copied project on the new host IDE.\nRecompile the project to generate new object code."
  },
  {
    "objectID": "embedded-systems/section2/topic1/assets/Odd-Things-about-CodeWarrior.html#saving-projects",
    "href": "embedded-systems/section2/topic1/assets/Odd-Things-about-CodeWarrior.html#saving-projects",
    "title": "Odd Things about the CodeWarrior IDE",
    "section": "",
    "text": "The IDE automatically saves projects and updates project information after performing these actions:\n\nClosing the project.\nApplying or saving a preference or target-setting option\nAdding, deleting, or compiling a file.\nEditing group information.\nRemoving or compacting object code.\nQuitting the IDE.\n\nRemember This - The only way to tell where the project is to be stored is when creating the project. You cannot save as the project as a whole via the IDE anywhere else after it has been created."
  },
  {
    "objectID": "embedded-systems/section1/topic3/index.html",
    "href": "embedded-systems/section1/topic3/index.html",
    "title": "ICA0 Git and Github Basics",
    "section": "",
    "text": "ICA0\ngit and gh shell command overview by Robbin Law\ngit branching and merging basics by github\ngit and github with VSCode by Robbin Law",
    "crumbs": [
      "Embedded-Systems",
      "Environment Setup",
      "ICA0 Git and Github Basics"
    ]
  },
  {
    "objectID": "embedded-systems/section1/topic3/assets/git-gh-commands.html",
    "href": "embedded-systems/section1/topic3/assets/git-gh-commands.html",
    "title": "Git on the Command Line",
    "section": "",
    "text": "git docs"
  },
  {
    "objectID": "embedded-systems/section1/topic3/assets/git-gh-commands.html#resources",
    "href": "embedded-systems/section1/topic3/assets/git-gh-commands.html#resources",
    "title": "Git on the Command Line",
    "section": "",
    "text": "git docs"
  },
  {
    "objectID": "embedded-systems/section1/topic3/assets/git-gh-commands.html#basic-git-commands",
    "href": "embedded-systems/section1/topic3/assets/git-gh-commands.html#basic-git-commands",
    "title": "Git on the Command Line",
    "section": "Basic Git Commands",
    "text": "Basic Git Commands\nWe can use the git version control application directly from the command line. Here are some useful commands to get started.\n\ngit init - This command will create a git repository in the current folder on your machine.\n\nThe best way to create a repo is to do it on github via a browser. Once this is done you can clone the repo to your machine. Make your working folder where you want the repo stored and run the following command.\n\ngit clone UrlOfRepoOnGithub.\n\nYou will have had to copy the url of the github repo to the clipboard. Then use the following command to clone. This url is just an example. You would copy the clipboard to the command line.\n\ngit clone https://github.com/RobbinLawComputerEngineering/Semiconductors-Public.git.\n\nOnce your github repo is cloned down to your machine you can start adding folders and files to the repo, and changing what is already in the repo.\nWhen you make an addition or change to a file, always SAVE it, then use the following command to see that git knows there has been a change.\n\ngit status - This will give you the current status of your local git repository.\n\nAt this point the changed files names will be red.\nThe next thing is that you have to stage your changes.\n\ngit add . - Use this command to “stage” all of your current changes so that they are ready to be committed.\ngit status will show that the changed files are staged by turning the file names green from red.\n\nNow you are ready to commit the recent changes.\n\ngit commit -m \"Your Message\" - This command will take all of the staged changes and create a snapshot of the current state of your repository. Using commits is how we generate a commit history for our repository. The message is NOT optional.\n\nFinally you will want to update your github repo with the changes made on you machines local repo. You can have many commits to one push.\n\ngit push - This command will take whatever commits you have on your computer and push them to the remote repository on GitHub.com.\n\nIf you are working with others and someone changes the github repo, you will have to pull to get those changes on your machine.\n\ngit pull - Use this command to grab any changes from your remote repository (e.g.: GitHub.com) and pull them down onto your local repository (the one on your computer). The pull command is a combination of git fetch and git merge commands.\n\nAnother great command to see what is going on.\n\ngit log - This will give you the history of your git repository\n\nThere are a lot of things to learn when it comes to working with git, but these commands are the day-to-day ones that you will do as you work with version control."
  },
  {
    "objectID": "embedded-systems/section1/topic3/assets/git-gh-commands.html#remote-repositories",
    "href": "embedded-systems/section1/topic3/assets/git-gh-commands.html#remote-repositories",
    "title": "Git on the Command Line",
    "section": "Remote Repositories",
    "text": "Remote Repositories\nYou can use the GitHub CLI to create a remote repository on GitHub.com.\ngh repo create my-first-repository\nThe command above is interactive, so just follow the prompts.\nYou can push your code to GitHub.com by typing the following:\ngit push -u origin main\nNote that the -u means set upstream. After that, you will only need to type git push to push any local changes to the remote repository.\nYou can pull your code from GitHub.com by typing the following:\ngit pull upstream main\nAfter that, you will only need to type git pull to pull any remote changes to the local repository.\nHere’s some other helpful commands with regard to the remote repository connections for your local repository.\n\ngit remote -v - View all the remote repositories\ngit remote remove [remoteName] - Remove a remote entry\ngit remote add [remoteName] [URL-to-Repository] - Add a remote repository"
  },
  {
    "objectID": "embedded-systems/section1/topic1/index.html",
    "href": "embedded-systems/section1/topic1/index.html",
    "title": "Tool Chain Software Setup",
    "section": "",
    "text": "Install drivers and get CodeWarrior setup by Carlos Estay\n\nYoutube video; first in a playlist of 4.\nWatch this first.\n\nUsing VS Code as an Editor by Simon Walker\n\nRead this pdf document second.\n\nTool chain tips by Simon Walker\n\nYoutube video.\nWatch this third.",
    "crumbs": [
      "Embedded-Systems",
      "Environment Setup",
      "Tool Chain Software Setup"
    ]
  },
  {
    "objectID": "embedded-systems/section1/topic1/index.html#go-thru-these-resources-before-downloading-and-installing-software",
    "href": "embedded-systems/section1/topic1/index.html#go-thru-these-resources-before-downloading-and-installing-software",
    "title": "Tool Chain Software Setup",
    "section": "",
    "text": "Install drivers and get CodeWarrior setup by Carlos Estay\n\nYoutube video; first in a playlist of 4.\nWatch this first.\n\nUsing VS Code as an Editor by Simon Walker\n\nRead this pdf document second.\n\nTool chain tips by Simon Walker\n\nYoutube video.\nWatch this third.",
    "crumbs": [
      "Embedded-Systems",
      "Environment Setup",
      "Tool Chain Software Setup"
    ]
  },
  {
    "objectID": "embedded-systems/section1/topic1/index.html#software-to-download-and-install",
    "href": "embedded-systems/section1/topic1/index.html#software-to-download-and-install",
    "title": "Tool Chain Software Setup",
    "section": "Software to Download and Install",
    "text": "Software to Download and Install\n\nDownload and Install CodeWarrior Software and USBDM Drivers\nUnfortunately Github cannot store files as large as the software files we need to download. They must be retrieved from Brightspace or a usb from your instructor.\n\nStep 1\n\nDownload the USBDM drivers file and unzip.\n\n\n\nStep 2\n\nRun the file called USBDM_Drivers_4_12_1_Win_x64 to install the first driver.\n\n\n\nStep 3\n\nDownload and install CodeWarrior5.1 Special Edition.\nDo not store it in C:\\Program Files (x86), put it in another folder on the C:\\ drive that has NO spaces in the folder name.\nThe very last step in the install asks if you want to update, we DO NOT want to update, so just cancel that.\n\n\n\nStep 4\n\nRun the file called USBDM_4_12_1_262_Win only after CodeWarrior is installed.\n\n\n\n\nDownload and Install Git\n\nGit Website\nDownload the latest version. Allow all the defaults on download. The path should be updated automatically, so that git is available from any directory.\nOpen a PowerShell or CMD terminal. In the shell run git -–version to make sure that git is installed and accessible from this directory. Note that it is two minus bars before version. If a version number is not returned, the path must be set so that git is available from any directory. To set the path, in the search area at the bottom of the windows task bar type env and select Edit Environment Variables for your Account. Then edit the PATH and add new C:\\Program Files\\Git\\cmd. You could add this to the system environments alternatively. Now you can run the git command from a terminal anywhere.\n\n\n\nDownload and Install GitHub CLI\n\nGitHub CLI Website\nDownload the latest version. Allow all the defaults on download. The path should be updated automatically, so that gh is available from any directory.\n\n\n\nDownload and Install Visual Studio Code\n\nVisual Studio Code Website\nDownload Visual Studio Code if you do not already have it on your machine.",
    "crumbs": [
      "Embedded-Systems",
      "Environment Setup",
      "Tool Chain Software Setup"
    ]
  },
  {
    "objectID": "embedded-systems/section1/topic1/assets/tool-chain-software/readme.html",
    "href": "embedded-systems/section1/topic1/assets/tool-chain-software/readme.html",
    "title": "Home",
    "section": "",
    "text": "The software files are too big for github. They must be downloaded via Brightspace or a usb."
  },
  {
    "objectID": "embedded-systems/index.html",
    "href": "embedded-systems/index.html",
    "title": "Embedded-Systems",
    "section": "",
    "text": "In-Class Assessments (ICA’s); 10 total; 30% of final mark; 3% each.\nAll In-Class Assessments (ICA’s) are due on Sunday of the week at 11:59 PM.\nLabs; 5 total; 10% of final mark; 2% each.\nAll Labs are due on Sunday of the week at 11:59 PM.\nPractical Assessments (PA’s); 3 total; 60% of final mark; 20% each.\nAll Practical Assessments (PA’s) are done during class time.\nAll Assessments are to be uploaded (pushed) to your github workbook repo.\n\n\n\n\n\n\n\n\n\n\nWeek\nAssessment\nDay1 (2 hrs)\nDay2 (2 hrs)\n\n\n\n\n1-J06\n\nIntro Github-Repo Toolchain-Setup\nIntro Github-Repo Toolchain-Setup\n\n\n2-J13\nICA01-Prog-Workflow\nDemo1 Workflow Data-Types Bitwise-Ops\nDemo1 Workflow Data-Types Bitwise-Ops\n\n\n3-J20\nICA02-Code-Migrate\nDebugging Breakpoints\nDebugging Breakpoints\n\n\n4-J27\nICA03-Bitwise-Ops\nGPIO-LED-Switches\nGPIO-LED-Switches\n\n\n5-F03\nICA04-AD2-Measure\nMeasure Freq with AD2 Switch States\nMeasure Freq with AD2 Switch Debouncing\n\n\n6-F10\nICA05-SWL-Lib\nSWL-Library\nPractical Assessment 1\n\n\nF17\n\nREADING-WEEK\nREADING-WEEK\n\n\n7-F24\nICA06-PLL\nPhased-Locked-Loop\nPLL\n\n\n8-M03\nICA07-RTI\nReal-Time-Interrupt\nRTI\n\n\n9-M10\nICA08-SCI-Basic Lab01-SCI\nSerial-Com-Interface\nSCI\n\n\n10-M17\nICA09-Segs-Basic\n7-Segment-Display\n7-Segs-Display\n\n\n11-M24\nLab02-16-bit-Segs\n16-bit-Segs\n16-bit-Segs\n\n\n12-M31\nLab03-Dec-Entry\nDecimal-Entry-Conversion\nPractical Assessment 2\n\n\n13-A07\nICA12-LCD\nLiquid-Crystal-Display\nLCD\n\n\n14-A14\nLab04-Sec-LCD-Functions\nCharacter-Buffers sprint\nCharacter-Buffers sprint\n\n\n15-A21\nLab05-Dynamic-LCD\nDynamic-LCD\nPractical Assessment 3",
    "crumbs": [
      "Embedded-Systems"
    ]
  },
  {
    "objectID": "embedded-systems/index.html#calendar-2025-winter",
    "href": "embedded-systems/index.html#calendar-2025-winter",
    "title": "Embedded-Systems",
    "section": "",
    "text": "In-Class Assessments (ICA’s); 10 total; 30% of final mark; 3% each.\nAll In-Class Assessments (ICA’s) are due on Sunday of the week at 11:59 PM.\nLabs; 5 total; 10% of final mark; 2% each.\nAll Labs are due on Sunday of the week at 11:59 PM.\nPractical Assessments (PA’s); 3 total; 60% of final mark; 20% each.\nAll Practical Assessments (PA’s) are done during class time.\nAll Assessments are to be uploaded (pushed) to your github workbook repo.\n\n\n\n\n\n\n\n\n\n\nWeek\nAssessment\nDay1 (2 hrs)\nDay2 (2 hrs)\n\n\n\n\n1-J06\n\nIntro Github-Repo Toolchain-Setup\nIntro Github-Repo Toolchain-Setup\n\n\n2-J13\nICA01-Prog-Workflow\nDemo1 Workflow Data-Types Bitwise-Ops\nDemo1 Workflow Data-Types Bitwise-Ops\n\n\n3-J20\nICA02-Code-Migrate\nDebugging Breakpoints\nDebugging Breakpoints\n\n\n4-J27\nICA03-Bitwise-Ops\nGPIO-LED-Switches\nGPIO-LED-Switches\n\n\n5-F03\nICA04-AD2-Measure\nMeasure Freq with AD2 Switch States\nMeasure Freq with AD2 Switch Debouncing\n\n\n6-F10\nICA05-SWL-Lib\nSWL-Library\nPractical Assessment 1\n\n\nF17\n\nREADING-WEEK\nREADING-WEEK\n\n\n7-F24\nICA06-PLL\nPhased-Locked-Loop\nPLL\n\n\n8-M03\nICA07-RTI\nReal-Time-Interrupt\nRTI\n\n\n9-M10\nICA08-SCI-Basic Lab01-SCI\nSerial-Com-Interface\nSCI\n\n\n10-M17\nICA09-Segs-Basic\n7-Segment-Display\n7-Segs-Display\n\n\n11-M24\nLab02-16-bit-Segs\n16-bit-Segs\n16-bit-Segs\n\n\n12-M31\nLab03-Dec-Entry\nDecimal-Entry-Conversion\nPractical Assessment 2\n\n\n13-A07\nICA12-LCD\nLiquid-Crystal-Display\nLCD\n\n\n14-A14\nLab04-Sec-LCD-Functions\nCharacter-Buffers sprint\nCharacter-Buffers sprint\n\n\n15-A21\nLab05-Dynamic-LCD\nDynamic-LCD\nPractical Assessment 3",
    "crumbs": [
      "Embedded-Systems"
    ]
  },
  {
    "objectID": "embedded-systems/index.html#general-resources",
    "href": "embedded-systems/index.html#general-resources",
    "title": "Embedded-Systems",
    "section": "General Resources",
    "text": "General Resources\n\nCMPE1250 Winter of 2022 Lectures by Carlos Estay\n\nyoutube video playlist; 29 videos.\n\nCMPE1250 Winter of 2023 Lectures by Carlos Estay\n\nyoutube video playlist; 4 videos.\n\nCMPE1250 Fall of 2023 Lectures by Carlos Estay\n\nyoutube video playlist; 38 videos.\n\nCMPE1250 Fall of 2024 Lectures by Carlos Estay\n\nyoutube video playlist; 40 videos.\n\nCMPE2250 Winter of 2024 Lectures by Carlos Estay\n\nyoutube video playlist; 37 videos.",
    "crumbs": [
      "Embedded-Systems"
    ]
  },
  {
    "objectID": "embedded-systems/section1/topic0/index.html",
    "href": "embedded-systems/section1/topic0/index.html",
    "title": "Join Github Classroom",
    "section": "",
    "text": "GitHub Website\nGo to GitHub and create an account. Choose an appropriate username that has your first and last name in it. Remember the username that you create the account with as well as the email that you use. You will need this information to complete the setup.",
    "crumbs": [
      "Embedded-Systems",
      "Environment Setup",
      "Join Github Classroom"
    ]
  },
  {
    "objectID": "embedded-systems/section1/topic0/index.html#step-1-create-a-github-account",
    "href": "embedded-systems/section1/topic0/index.html#step-1-create-a-github-account",
    "title": "Join Github Classroom",
    "section": "",
    "text": "GitHub Website\nGo to GitHub and create an account. Choose an appropriate username that has your first and last name in it. Remember the username that you create the account with as well as the email that you use. You will need this information to complete the setup.",
    "crumbs": [
      "Embedded-Systems",
      "Environment Setup",
      "Join Github Classroom"
    ]
  },
  {
    "objectID": "embedded-systems/section1/topic0/index.html#step-2-join-github-classroom-and-create-your-workbook-repo",
    "href": "embedded-systems/section1/topic0/index.html#step-2-join-github-classroom-and-create-your-workbook-repo",
    "title": "Join Github Classroom",
    "section": "Step 2 Join Github Classroom and Create Your Workbook Repo",
    "text": "Step 2 Join Github Classroom and Create Your Workbook Repo\n\nClick the link below for your class and follow the instructions. Look for your name and click on it to begin the process.\nLink to Github Classroom for CMPE1250-A02\nLink to Github Classroom for CMPE1250-A03",
    "crumbs": [
      "Embedded-Systems",
      "Environment Setup",
      "Join Github Classroom"
    ]
  },
  {
    "objectID": "embedded-systems/section1/topic0/index.html#step-3-accept-invitation-to-join-a-github-team",
    "href": "embedded-systems/section1/topic0/index.html#step-3-accept-invitation-to-join-a-github-team",
    "title": "Join Github Classroom",
    "section": "Step 3 Accept Invitation to Join a Github Team",
    "text": "Step 3 Accept Invitation to Join a Github Team\n\nAn invitation should have been sent to you via an email. Accept the invitation, which will allow you read access to a InClassDemos submodule.",
    "crumbs": [
      "Embedded-Systems",
      "Environment Setup",
      "Join Github Classroom"
    ]
  },
  {
    "objectID": "embedded-systems/section1/topic0/index.html#step-4-clone-your-github-workbook-repo-to-a-local-machine",
    "href": "embedded-systems/section1/topic0/index.html#step-4-clone-your-github-workbook-repo-to-a-local-machine",
    "title": "Join Github Classroom",
    "section": "Step 4 Clone your Github Workbook Repo to a local machine",
    "text": "Step 4 Clone your Github Workbook Repo to a local machine\n\nSign into Github and click on your profile pic (top right) and then click on your organizations.\nIf you missed Step 3 you can still accept the invitation here.\nClick on the organization called CMPE1250 and you will see your workbook repo, click on it and from the green dropdown copy the url to the clip board.\nOpen a terminal and make the working folder the place that you want to clone the github workbook repo.\nType the following command to clone the github workbook repo to this local machine:\n\ngit clone url\n\nfor example\n\ngit clone https://github.com/RobbinLawComputerEngineering/Semiconductors-Public.git\n\nNow change directories to the root folder of the cloned repo using the cd command.\nFrom the root folder of the cloned repo run the following command to update the submodule where demos are provided:\n\n./update.cmd\n\nIn your workbook repo create a new folder just under the root level called demos.\nFrom the submodule InClassDemos copy the demo that you are interested in to the newly created demos folder in your workbook repo, then you can make changes to the demo and experiment, and save your work in the demos folder of your workbook repo. You cannot save work to the submodule as it is read only.",
    "crumbs": [
      "Embedded-Systems",
      "Environment Setup",
      "Join Github Classroom"
    ]
  },
  {
    "objectID": "embedded-systems/section1/topic1/assets/vscode-features-extensions.html",
    "href": "embedded-systems/section1/topic1/assets/vscode-features-extensions.html",
    "title": "VS Code Features and Extensions",
    "section": "",
    "text": "VS Code Shortcuts by Traversy Media runtime 17 min\nVS Code Keyboard Shortcuts\n  \"Ctrl + /\" gives a comment in whatever language you are editing in.\n\n  \"Ctrl + `\" brings up a new terminal.\n\n  Word Wrap \"on\" via settings. Just search \"word wrap\".\n\n  \"Alt\" to highlight multiple lines to operate on.\n\n  \"Alt + Shift\" and highlight the paragraph and it will multi highlight each line.\nLorem is part of VSCode. Lorem20 will give 20 random words in one sentence.\nEmmet Cheat Sheet\n\nEmmet is part of VSCode. Used when no content is in place.\n\"! + enter\" will give html5 template.\n\nSome Emmet concepts that use same syntax as CSS:\n\n    + is the sibling selector ex. nav+ul+li gives them as siblings.\n\n    &gt; is the child selector ex. nav&gt;ul&gt;&gt;li*6 gives them as children of the previous.\n\n    ^ is the move up action.\n\n    . class\n\n    # id\n\nUse \"Ctrl + Space\" to get Emmet back in play.\n\nCode faster with Custom VSCode Snippets by Brad Traversy runtime 21 min\nCode Snippets Generator for VSCode, Sublime, and Atom"
  },
  {
    "objectID": "embedded-systems/section1/topic1/assets/vscode-features-extensions.html#vs-code-out-of-the-box-features",
    "href": "embedded-systems/section1/topic1/assets/vscode-features-extensions.html#vs-code-out-of-the-box-features",
    "title": "VS Code Features and Extensions",
    "section": "",
    "text": "VS Code Shortcuts by Traversy Media runtime 17 min\nVS Code Keyboard Shortcuts\n  \"Ctrl + /\" gives a comment in whatever language you are editing in.\n\n  \"Ctrl + `\" brings up a new terminal.\n\n  Word Wrap \"on\" via settings. Just search \"word wrap\".\n\n  \"Alt\" to highlight multiple lines to operate on.\n\n  \"Alt + Shift\" and highlight the paragraph and it will multi highlight each line.\nLorem is part of VSCode. Lorem20 will give 20 random words in one sentence.\nEmmet Cheat Sheet\n\nEmmet is part of VSCode. Used when no content is in place.\n\"! + enter\" will give html5 template.\n\nSome Emmet concepts that use same syntax as CSS:\n\n    + is the sibling selector ex. nav+ul+li gives them as siblings.\n\n    &gt; is the child selector ex. nav&gt;ul&gt;&gt;li*6 gives them as children of the previous.\n\n    ^ is the move up action.\n\n    . class\n\n    # id\n\nUse \"Ctrl + Space\" to get Emmet back in play.\n\nCode faster with Custom VSCode Snippets by Brad Traversy runtime 21 min\nCode Snippets Generator for VSCode, Sublime, and Atom"
  },
  {
    "objectID": "embedded-systems/section1/topic1/assets/vscode-features-extensions.html#vs-code-extensions-to-download",
    "href": "embedded-systems/section1/topic1/assets/vscode-features-extensions.html#vs-code-extensions-to-download",
    "title": "VS Code Features and Extensions",
    "section": "VS Code Extensions to Download",
    "text": "VS Code Extensions to Download\nDownload from Extensions Market Place\n\nMarkdown All in One by Yu Zhang - preview .md files\nPDF Preview by Analytic Signal Limited\nMaterial Icon Theme by Philipp Kief - Icon Theme\nOne Dark Pro by binaryify - Color Theme\nPrettier-Code Formatter by Prettier\nhtmltagwrap by Brad Gashler (Alt + w) - to markup content that is already in place\nmultiple cursors\nAuto Rename Tag by Jun Han - to rename an HTML tag faster\nREST Client by Huachao Mao\nHTML Snippets\nHTML CSS Support\nJavaScript ES6 Snippets\nLive Server by Ritwick Dey - opens in the default browser\nLive Preview by Microsoft - opens in a tab in VSCode\nAuto Import by steotes\nDartJs Sass Compiler and Sass Watcher by CodeLios\nES 7 React/Redux/ GraphQL/React-Native snippets extension by dsznajder"
  },
  {
    "objectID": "embedded-systems/section1/topic1/assets/vscode-features-extensions.html#vs-code-and-extension-config-settings",
    "href": "embedded-systems/section1/topic1/assets/vscode-features-extensions.html#vs-code-and-extension-config-settings",
    "title": "VS Code Features and Extensions",
    "section": "VS Code and Extension Config Settings",
    "text": "VS Code and Extension Config Settings\n\nVS Code Files:\n\nAuto Save: afterdelay\nAuto Save Delay: 1000 ms\n\nVS Code Editor:\n\nFormat on Save: check\nFormat on Save Mode: file\n\nAuto Import configuration settings:\n\nGo to File/Preferences/Settings in VSCode\nIn the settings search type “auto import”\nIn the “Auto Import Configuration”\nchange the “Files to Scan” to {js, jsx, ts, tsx}"
  },
  {
    "objectID": "embedded-systems/section1/topic2/index.html",
    "href": "embedded-systems/section1/topic2/index.html",
    "title": "Test Drive System",
    "section": "",
    "text": "We will test drive our system with the file BoardTest.abs.s19\nBoardTest.abs.s19\n\nDownload this file, remember where you put it.\n\nWatch the following video again starting at 6:30 minute, where it shows how to create a new code warrior project from scratch. Then open code warrior and create a new project as shown in the video, the name of the project does not matter.\nInstall drivers and get CodeWarrior setup by Carlos Estay\nWhen you open CodeWarrior a Startup dialog box should appear, if not go to File/Start Dialog…\nFrom the Startup Dialog box click Create New Project.\nThen under Select the derivative to use choose HCS12XD Family/MC9S12XDP512\nAlso choose USBDM in the Connections box. Then click next.\nThen choose Single Core, and click next.\nThen make sure the C box is checked and all others not. You can change the name of the folder and place to store it on your machine but for now just leave the default. Click next.\nNo need to add existing files so click next.\nWe want None for Rapid Dev Options. Click next.\nChoose ANSI Startup Code, Small Memory Model, and IEEE32 for both float and double. Click next.\nFinally check NO to PC-lint. Click Finish.\nThen in CodeWarrior, start the Real-Time Debugger by clicking the slanted green arrow.\nClick on OK, once or twice until the program is downloaded to the micro board.\nSelect the USBDM HCS12 Menu bar tab.\nSelect Load ….\nChange Files of Type to Motorola S-Record .s?.\nLocate the file BoardTest.abs.s19, that is on your machine, then press Load Code. You will have to click OK again to download this code to the micro board.\nRun the software by clicking the green Start arrow to see if your board is working properly. You should see text on the LCD and the yellow 7-segment display should be counting fast in hex. Press any button to continue the test.\nClick the red Reset Target arrow to stop the program.",
    "crumbs": [
      "Embedded-Systems",
      "Environment Setup",
      "Test Drive System"
    ]
  },
  {
    "objectID": "embedded-systems/section1/topic3/assets/git-github-with-VSCode.html",
    "href": "embedded-systems/section1/topic3/assets/git-github-with-VSCode.html",
    "title": "Git and Github with VS Code",
    "section": "",
    "text": "first time git setup\ngit integration with VSCode\ngit credential manager with multiple users"
  },
  {
    "objectID": "embedded-systems/section1/topic3/assets/git-github-with-VSCode.html#resources",
    "href": "embedded-systems/section1/topic3/assets/git-github-with-VSCode.html#resources",
    "title": "Git and Github with VS Code",
    "section": "",
    "text": "first time git setup\ngit integration with VSCode\ngit credential manager with multiple users"
  },
  {
    "objectID": "embedded-systems/section1/topic3/assets/git-github-with-VSCode.html#setting-github-authentication-for-one-github-user",
    "href": "embedded-systems/section1/topic3/assets/git-github-with-VSCode.html#setting-github-authentication-for-one-github-user",
    "title": "Git and Github with VS Code",
    "section": "Setting GitHub Authentication for one GitHub User",
    "text": "Setting GitHub Authentication for one GitHub User\nOpen a terminal and check to see that git and github cli are available.\ngit –-version\ngh –-version\nIf one is missing you have to download the msi and try again until a version shows.\nNow config git to always use the user name and email that you used to set up your github account. Note that you only have to do this once.\ngit config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\nNow to see that the config sticks.\ngit config -l\nThe -l means list all configs. Press the space bar to see each setting, and q to quit.\nIf you still get errors when trying to pull from or push to github, you will have to get into the Windows Credential Manager and delete the github references. A machine restart will be required."
  },
  {
    "objectID": "embedded-systems/section1/topic3/assets/git-github-with-VSCode.html#setting-github-authentication-for-more-than-one-github-user",
    "href": "embedded-systems/section1/topic3/assets/git-github-with-VSCode.html#setting-github-authentication-for-more-than-one-github-user",
    "title": "Git and Github with VS Code",
    "section": "Setting GitHub Authentication for more than one GitHub User",
    "text": "Setting GitHub Authentication for more than one GitHub User\nIf you have more than one user registered at github you must do the following to allow you to authenticate and use different accounts. Do not do the previous username and email config settings or else you will always authenticate to only that one github user account.\ngit config --global  credential.usehttppath true\nNote that with this now every time you touch github you will be asked to authenticate."
  },
  {
    "objectID": "embedded-systems/section2/topic1/assets/function-pointers.html",
    "href": "embedded-systems/section2/topic1/assets/function-pointers.html",
    "title": "Function Pointers",
    "section": "",
    "text": "Function pointer declaration examples:\nvoid (*pFunction)(void) - Pointer to a function that takes no parameters and does not return anything \n\nvoid (*pFunction)(int) - Pointer to a function that takes one int parameter and does not return anything \n\nvoid (*pFunction)() - Pointer to a function that takes any parameter and does not return anything \n\nint (*pFunction)(void) - Pointer to a function that takes no parameters and returns an int \n\nint (*pFunction)(int) - Pointer to a function that takes one int parameter and returns an int \n\nint (*pFunction)() - Pointer to a function that takes any parameter and returns an int\n\n\nThere are times when the type of a pointer is not known. This occurs primarily in C library functions.\nFor this reason, the void* pointer type represents a generic, as yet unspecified pointer – in other words, a pointer whose type is not known at declaration. Any pointer type can be assigned to a pointer variable of the void* type. However, before that pointer variable can be accessed, the type of the data being accessed must be specified through the use of a casting operation:\n// we don't yet know what it points to.\nvoid* aPtr = NULL;\n// it has the address of height, but no type yet.\naPtr = &height;\n// with casting, we can now go to that\n// address and fetch an integer value.     \nint h = *(int*)aPtr; \nIn the first statement of the preceding code block, we can see how aPtr is declared as a pointer, but we don’t yet know its type or what it points to. In the next statement, aPtr is given the address of height, but we still don’t know the type of the object that aPtr points to. You might think that the type could be inferred from the named variable, but C is not that smart, in other words, the compiler does not keep that kind of information about variables around for use at runtime. In the last statement, there is quite a bit going on. First, we must cast void* aPtr to int* aPtr. Having done that, we can then get the target of the integer pointer by dereferencing the properly typed pointer to get the value of height, which is the correct number of bytes for int. Casting tells the compiler exactly how many bytes to fetch and exactly how to interpret those bytes.\nint main( void)  {\n  int height = 10;\n  void* aPtr = NULL;\n  aPtr = &height;\n  int h = *(int*)aPtr;\n  printf( \"             height = [%d]\\n\" , height );\n  printf( \"        *(int*)aPtr = [%d]\\n\" , *(int*)aPtr );\n  printf( \"                  h = [%d]\\n\" , h );\n  printf( \"   sizeof( height ) = %lu\\n\" , sizeof( height ) );\n  printf( \"sizeof(*(int*)aPtr) = %lu\\n\" , sizeof( *(int*)aPtr ) );\n  *(int*)aPtr = 3;\n  printf( \"        *(int*)aPtr = [%d]\\n\" , *(int*)aPtr );\n  printf( \"             height = [%d]\\n\\n\" , height );\n  return 0;\n}"
  },
  {
    "objectID": "embedded-systems/section2/topic1/assets/function-pointers.html#understanding-the-void-type",
    "href": "embedded-systems/section2/topic1/assets/function-pointers.html#understanding-the-void-type",
    "title": "Function Pointers",
    "section": "",
    "text": "There are times when the type of a pointer is not known. This occurs primarily in C library functions.\nFor this reason, the void* pointer type represents a generic, as yet unspecified pointer – in other words, a pointer whose type is not known at declaration. Any pointer type can be assigned to a pointer variable of the void* type. However, before that pointer variable can be accessed, the type of the data being accessed must be specified through the use of a casting operation:\n// we don't yet know what it points to.\nvoid* aPtr = NULL;\n// it has the address of height, but no type yet.\naPtr = &height;\n// with casting, we can now go to that\n// address and fetch an integer value.     \nint h = *(int*)aPtr; \nIn the first statement of the preceding code block, we can see how aPtr is declared as a pointer, but we don’t yet know its type or what it points to. In the next statement, aPtr is given the address of height, but we still don’t know the type of the object that aPtr points to. You might think that the type could be inferred from the named variable, but C is not that smart, in other words, the compiler does not keep that kind of information about variables around for use at runtime. In the last statement, there is quite a bit going on. First, we must cast void* aPtr to int* aPtr. Having done that, we can then get the target of the integer pointer by dereferencing the properly typed pointer to get the value of height, which is the correct number of bytes for int. Casting tells the compiler exactly how many bytes to fetch and exactly how to interpret those bytes.\nint main( void)  {\n  int height = 10;\n  void* aPtr = NULL;\n  aPtr = &height;\n  int h = *(int*)aPtr;\n  printf( \"             height = [%d]\\n\" , height );\n  printf( \"        *(int*)aPtr = [%d]\\n\" , *(int*)aPtr );\n  printf( \"                  h = [%d]\\n\" , h );\n  printf( \"   sizeof( height ) = %lu\\n\" , sizeof( height ) );\n  printf( \"sizeof(*(int*)aPtr) = %lu\\n\" , sizeof( *(int*)aPtr ) );\n  *(int*)aPtr = 3;\n  printf( \"        *(int*)aPtr = [%d]\\n\" , *(int*)aPtr );\n  printf( \"             height = [%d]\\n\\n\" , height );\n  return 0;\n}"
  },
  {
    "objectID": "embedded-systems/section2/topic1/index.html",
    "href": "embedded-systems/section2/topic1/index.html",
    "title": "C Resources",
    "section": "",
    "text": "main.c template\nUsing C with the 9S12 17 pages PDF\nIntroduction to C Notes 7 pages PDF\nPointers 8 pages PDF\nPointers Summary 2 pages PDF\nPointers Video youtube 8min\nPointer Demo by James Chaulk youtube 22min\nPointers Website\nFunction Pointers\nFunction Pointers Website\nC for C# Programmers 11 pages PDF\nC language reference by cppreference.com WEBSITE\nOdd Things about Code Warrior",
    "crumbs": [
      "Embedded-Systems",
      "Intro to the Micro",
      "C Resources"
    ]
  },
  {
    "objectID": "embedded-systems/section2/topic3/assets/Odd-Things-about-CodeWarrior.html",
    "href": "embedded-systems/section2/topic3/assets/Odd-Things-about-CodeWarrior.html",
    "title": "Odd Things about the CodeWarrior IDE",
    "section": "",
    "text": "Use the project wizard provided with the IDE to quickly create new projects. The wizard creates everything needed for a minimal, ready-to-run project. Use the created project as a foundation upon which to add features for each new project.\nChoose File &gt; New Project.\n\nThe New Project Wizard opens.\nEnter a project name in the Project Name field and set the Location for the new project.\n\n\n\n\nCodeWarrior projects whose names end in .mcp are cross-platform. However, the object code stored inside each project folder is not cross-platform. Use these procedures to properly open the project on a different host computer.\n\nCopy the project folder from the original host to the new host.\nDelete the Data folder inside the newly copied project folder.\nOpen the newly copied project on the new host IDE.\nRecompile the project to generate new object code.\n\n\n\n\nThe IDE automatically saves projects and updates project information after performing these actions:\n\nClosing the project.\nApplying or saving a preference or target-setting option\nAdding, deleting, or compiling a file.\nEditing group information.\nRemoving or compacting object code.\nQuitting the IDE.\n\nRemember This - The only way to tell where the project is to be stored is when creating the project. You cannot save as the project as a whole via the IDE anywhere else after it has been created."
  },
  {
    "objectID": "embedded-systems/section2/topic3/assets/Odd-Things-about-CodeWarrior.html#creating-new-projects-using-wizard",
    "href": "embedded-systems/section2/topic3/assets/Odd-Things-about-CodeWarrior.html#creating-new-projects-using-wizard",
    "title": "Odd Things about the CodeWarrior IDE",
    "section": "",
    "text": "Use the project wizard provided with the IDE to quickly create new projects. The wizard creates everything needed for a minimal, ready-to-run project. Use the created project as a foundation upon which to add features for each new project.\nChoose File &gt; New Project.\n\nThe New Project Wizard opens.\nEnter a project name in the Project Name field and set the Location for the new project."
  },
  {
    "objectID": "embedded-systems/section2/topic3/assets/Odd-Things-about-CodeWarrior.html#opening-projects-created-on-other-hosts",
    "href": "embedded-systems/section2/topic3/assets/Odd-Things-about-CodeWarrior.html#opening-projects-created-on-other-hosts",
    "title": "Odd Things about the CodeWarrior IDE",
    "section": "",
    "text": "CodeWarrior projects whose names end in .mcp are cross-platform. However, the object code stored inside each project folder is not cross-platform. Use these procedures to properly open the project on a different host computer.\n\nCopy the project folder from the original host to the new host.\nDelete the Data folder inside the newly copied project folder.\nOpen the newly copied project on the new host IDE.\nRecompile the project to generate new object code."
  },
  {
    "objectID": "embedded-systems/section2/topic3/assets/Odd-Things-about-CodeWarrior.html#saving-projects",
    "href": "embedded-systems/section2/topic3/assets/Odd-Things-about-CodeWarrior.html#saving-projects",
    "title": "Odd Things about the CodeWarrior IDE",
    "section": "",
    "text": "The IDE automatically saves projects and updates project information after performing these actions:\n\nClosing the project.\nApplying or saving a preference or target-setting option\nAdding, deleting, or compiling a file.\nEditing group information.\nRemoving or compacting object code.\nQuitting the IDE.\n\nRemember This - The only way to tell where the project is to be stored is when creating the project. You cannot save as the project as a whole via the IDE anywhere else after it has been created."
  },
  {
    "objectID": "embedded-systems/section2/topic4/assets/Odd-Things-about-CodeWarrior.html",
    "href": "embedded-systems/section2/topic4/assets/Odd-Things-about-CodeWarrior.html",
    "title": "Odd Things about the CodeWarrior IDE",
    "section": "",
    "text": "Use the project wizard provided with the IDE to quickly create new projects. The wizard creates everything needed for a minimal, ready-to-run project. Use the created project as a foundation upon which to add features for each new project.\nChoose File &gt; New Project.\n\nThe New Project Wizard opens.\nEnter a project name in the Project Name field and set the Location for the new project.\n\n\n\n\nCodeWarrior projects whose names end in .mcp are cross-platform. However, the object code stored inside each project folder is not cross-platform. Use these procedures to properly open the project on a different host computer.\n\nCopy the project folder from the original host to the new host.\nDelete the Data folder inside the newly copied project folder.\nOpen the newly copied project on the new host IDE.\nRecompile the project to generate new object code.\n\n\n\n\nThe IDE automatically saves projects and updates project information after performing these actions:\n\nClosing the project.\nApplying or saving a preference or target-setting option\nAdding, deleting, or compiling a file.\nEditing group information.\nRemoving or compacting object code.\nQuitting the IDE.\n\nRemember This - The only way to tell where the project is to be stored is when creating the project. You cannot save as the project as a whole via the IDE anywhere else after it has been created."
  },
  {
    "objectID": "embedded-systems/section2/topic4/assets/Odd-Things-about-CodeWarrior.html#creating-new-projects-using-wizard",
    "href": "embedded-systems/section2/topic4/assets/Odd-Things-about-CodeWarrior.html#creating-new-projects-using-wizard",
    "title": "Odd Things about the CodeWarrior IDE",
    "section": "",
    "text": "Use the project wizard provided with the IDE to quickly create new projects. The wizard creates everything needed for a minimal, ready-to-run project. Use the created project as a foundation upon which to add features for each new project.\nChoose File &gt; New Project.\n\nThe New Project Wizard opens.\nEnter a project name in the Project Name field and set the Location for the new project."
  },
  {
    "objectID": "embedded-systems/section2/topic4/assets/Odd-Things-about-CodeWarrior.html#opening-projects-created-on-other-hosts",
    "href": "embedded-systems/section2/topic4/assets/Odd-Things-about-CodeWarrior.html#opening-projects-created-on-other-hosts",
    "title": "Odd Things about the CodeWarrior IDE",
    "section": "",
    "text": "CodeWarrior projects whose names end in .mcp are cross-platform. However, the object code stored inside each project folder is not cross-platform. Use these procedures to properly open the project on a different host computer.\n\nCopy the project folder from the original host to the new host.\nDelete the Data folder inside the newly copied project folder.\nOpen the newly copied project on the new host IDE.\nRecompile the project to generate new object code."
  },
  {
    "objectID": "embedded-systems/section2/topic4/assets/Odd-Things-about-CodeWarrior.html#saving-projects",
    "href": "embedded-systems/section2/topic4/assets/Odd-Things-about-CodeWarrior.html#saving-projects",
    "title": "Odd Things about the CodeWarrior IDE",
    "section": "",
    "text": "The IDE automatically saves projects and updates project information after performing these actions:\n\nClosing the project.\nApplying or saving a preference or target-setting option\nAdding, deleting, or compiling a file.\nEditing group information.\nRemoving or compacting object code.\nQuitting the IDE.\n\nRemember This - The only way to tell where the project is to be stored is when creating the project. You cannot save as the project as a whole via the IDE anywhere else after it has been created."
  },
  {
    "objectID": "embedded-systems/section2/topic5/assets/Program.html",
    "href": "embedded-systems/section2/topic5/assets/Program.html",
    "title": "Home",
    "section": "",
    "text": "using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks;\nnamespace MigrateCode {\nclass Program { #region IGNORE_ME // ignore this block of code, it is here to simulate items // included in the derivative file of the micro // do not attempt to migrate this code to C (ignore the entire #region) static byte PT1AD1 = 0xFF; static byte DDR1AD1 = 0x00; // end ignore this block #endregion\n    //Global variables\n    static UInt16 uiMainLoopCount = 0;\n\n    static void Main(string[] args)\n    {\n        //One Time initialization\n        PT1AD1 &= 0x1F;\n        DDR1AD1 = 0xE0;            \n\n        //Infinite Loop\n        while (true)\n        {\n            ++uiMainLoopCount;\n            RED(uiMainLoopCount &lt; 0x1000);\n            GREEN(uiMainLoopCount &gt;= 0x1000);\n        }\n    }\n\n\n    //Functions\n    static void RED (bool bOn)\n    {\n        if (bOn)\n            PT1AD1 |= (byte)(((UInt32)1 &lt;&lt; (7)));\n        else\n        {\n            PT1AD1 &= 0x7F;\n        }\n\n    }\n\n    static void GREEN(bool bOn)\n    {\n        if (bOn)\n        {\n            PT1AD1 |= 0x20;\n        }\n        else\n        {\n            PT1AD1 &= 0b11011111;\n        }\n                        \n    }\n}\n}"
  },
  {
    "objectID": "embedded-systems/section3/topic0/index.html",
    "href": "embedded-systems/section3/topic0/index.html",
    "title": "Bitwise Resources",
    "section": "",
    "text": "Bitwise Operators by TheFabytm Youtube 9min\nBitwise Operators by SM Training Academy Youtube 10 min\nBitwise Operators by ElectronicsHub Website\nBitwise Operators by UTAT Website\nBitwise Operators by InterviewKickStart Website\nBitwise Operations 1 pdf\nBitwise Operations 2 pdf",
    "crumbs": [
      "Embedded-Systems",
      "GPIO",
      "Bitwise Resources"
    ]
  },
  {
    "objectID": "embedded-systems/section3/topic2/index.html",
    "href": "embedded-systems/section3/topic2/index.html",
    "title": "ICA04 Freq Measurements",
    "section": "",
    "text": "Switch LED Port Notes\nICA04 Frequency Measurements with AD2 Specs 2024-Fall version\nICA04 Frequency Measurements with AD2 Specs 2025-Winter version\nICA04 Math\nIntroduction to Analog Discovery 2 by Kevin Moore\nBasic Freq Measurement with the AD2 by Simon Walker",
    "crumbs": [
      "Embedded-Systems",
      "GPIO",
      "ICA04 Freq Measurements"
    ]
  },
  {
    "objectID": "embedded-systems/section4/topic1/index.html",
    "href": "embedded-systems/section4/topic1/index.html",
    "title": "PLL Resources",
    "section": "",
    "text": "Clock System Notes\nPhase Locked Loop Discussion",
    "crumbs": [
      "Embedded-Systems",
      "PLL",
      "PLL Resources"
    ]
  },
  {
    "objectID": "embedded-systems/section4/topic3/index.html",
    "href": "embedded-systems/section4/topic3/index.html",
    "title": "ICA",
    "section": "",
    "text": "ICA",
    "crumbs": [
      "Embedded-Systems",
      "PLL",
      "ICA"
    ]
  },
  {
    "objectID": "embedded-systems/section5/topic2/index.html",
    "href": "embedded-systems/section5/topic2/index.html",
    "title": "ICA07 RTI",
    "section": "",
    "text": "ICA07 Real Time Interrupt Specs",
    "crumbs": [
      "Embedded-Systems",
      "RTI",
      "ICA07 RTI"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Robbin Law",
    "section": "",
    "text": "This website contains a collection of resources on various subjects. This websites content has been edited by myself but much of it was originally authored by others. We stand on the shoulders of giants! I acknowledge original authors per resource. Enjoy"
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Robbin Law",
    "section": "",
    "text": "This website contains a collection of resources on various subjects. This websites content has been edited by myself but much of it was originally authored by others. We stand on the shoulders of giants! I acknowledge original authors per resource. Enjoy"
  },
  {
    "objectID": "semiconductors/section1/topic1/index.html",
    "href": "semiconductors/section1/topic1/index.html",
    "title": "Diode Physics & Models",
    "section": "",
    "text": "Original Author: Ross Taylor \nOriginal Article",
    "crumbs": [
      "Semiconductors",
      "Diodes",
      "Diode Physics & Models"
    ]
  },
  {
    "objectID": "semiconductors/section1/topic1/index.html#diode-physics-and-models",
    "href": "semiconductors/section1/topic1/index.html#diode-physics-and-models",
    "title": "Diode Physics & Models",
    "section": "",
    "text": "Original Author: Ross Taylor \nOriginal Article",
    "crumbs": [
      "Semiconductors",
      "Diodes",
      "Diode Physics & Models"
    ]
  },
  {
    "objectID": "semiconductors/section1/topic1/index.html#passive-components-vs.-active-components",
    "href": "semiconductors/section1/topic1/index.html#passive-components-vs.-active-components",
    "title": "Diode Physics & Models",
    "section": "Passive Components vs. Active Components",
    "text": "Passive Components vs. Active Components\n\nPassive Components\nIn a previous course, you worked with a group of electrical components that we refer to as Passive Components – components that behave according to simple mathematical relationships in response to changes in the rest of the circuitry.  For example, unless you push it beyond its limits, a resistor will always behave very nearly as predicted by\n\\(V=IR\\)\nA capacitor will always respond very nearly as predicted by\n\\(‌i_C=C(dv/dt)\\)\nAn inductor will always respond very nearly as predicted by\n\\(‌v_L=L(di/dt)\\)\nBoth the capacitor and inductor, as predicted by their basic formulas, will generate exponential charging functions when placed in series with a resistor and powered by a fixed voltage source.\nBy the way, the “very nearly” caveats in the preceding description is an important indication that, by developing these formulas, we are creating simplified mathematical models of real devices.  Real devices do other things that we don’t include in our models.  For example, the resistance of a resistor changes with temperature, and temperature changes with current, something Ohm’s Law by itself doesn’t account for.  Capacitors usually have a small leakage current which means the total current for charging a capacitor will be slightly greater than what is predicted by the model.  Inductors are plagued by residual magnetism which means they don’t respond instantaneously to changes in the circuit as predicted by our mathematical model.  However, the formulas we use to model the activity of these passive components is usually good enough for the work we’re doing.\n\n\nActive Components\nActive Components, on the other hand, behave differently for different conditions in a circuit.  The diode is the simplest of the active components.  Other examples that we will study in this course are transistors and operational amplifiers.",
    "crumbs": [
      "Semiconductors",
      "Diodes",
      "Diode Physics & Models"
    ]
  },
  {
    "objectID": "semiconductors/section1/topic1/index.html#insulators-conductors-and-semiconductors",
    "href": "semiconductors/section1/topic1/index.html#insulators-conductors-and-semiconductors",
    "title": "Diode Physics & Models",
    "section": "Insulators, Conductors, and Semiconductors",
    "text": "Insulators, Conductors, and Semiconductors\nOn a Periodic Table of the Elements, materials fall into three general categories.  Most of the left and central part of the periodic table consists of metals, which conduct electricity and react with non-metals to form Ionic Bonds.  On the right side are the non-metals, which do not readily conduct electricity. Most of these react to form Ionic Bonds with metals, but also form Covalent Bonds with other non-metals.  There is one family of non-metals which almost never enter into any chemical reactions, that is the Ideal (or Noble) Gases.\n\nPeriodic table is licensed under CC BY-SA 4.0 \nThe nature of each element is largely determined by the outermost electrons as they position themselves around the nucleus.  These outermost electrons are called the Valence Electrons, and for most elements, there are eight possible locations for valence electrons in what is called the Valence Shell.  The remainder of the electrons, combined with the nucleus, form the core of the atom.\nMetals typically have fewer than four valence electrons in their Valence Shell.  If they have one valence electron, the core charge will be +1; two valence electrons means a core charge of +2; three valence electrons means a core charge of +3.\nNon-metals typically have more than four valence electrons in their Valence Shell.  If they have seven valence electrons, the core charge will be +7; six valence electrons means a core charge of +6; five valence electrons means a core charge of +5.\nMetals, with their small core charges, have a weak attraction for their valence electrons, and so those electrons are relatively free to move as an electrical current when a voltage is applied across the material.  In fact, these electrons are officially referred to as “Free Electrons”.\n\nImage from Chemistry LibreTexts\nAlso, these loosely-attracted valence electrons can be stripped away, leaving a positive ion which will be attracted to negative ions in an Ionic Bond.  Ionic bonded compounds are typically non-conductive, because what used to be a free electron in the metal has now been bound to the non-metal atom.  The strong attractions between the positive ions and negative ions often result in regularly-defined crystal structures.  However, when dissolved in water, the ions become detached from each other, and can move as charged particles in the water, making the solution conductive.\n\nImage from SlideShare\nNon-metals with their large core charges, have a strong attraction for their valence electrons, so those electrons are not free to move in a current.  As a result, non-metals make good insulators.  When non-metals react with other non-metals, they form Covalent Bonds, in which they share pairs of valence electrons.  Using the Quantum Mechanical model of atoms to explain this, valence electrons occupy orbitals that can be: empty, contain one electron, or contain two electrons.  The most stable condition is for all the orbitals to be filled – i.e. containing two electrons, as is the natural case for the Ideal Gases, and which explains why they do not readily enter into chemical reactions.  Covalent bonds result in atoms with single electrons in their orbitals sharing those electrons with other similar atoms so that both atoms now have full orbitals.  The shared orbitals bind the atoms together tightly.  The electrons in these new compound orbitals are not free to move through the material, so covalently-bonded compounds are, under normal conditions, non-conductive.  They continue to be non-conductive when dissolved in water.\n\nImage from expii.com\nYou’ll notice in the previous discussion statements like “under normal conditions” and “do not readily conduct”.  The fact of the matter is that, given sufficient energy, any electron can be dislodged and can become a Free Electron until it loses its energy and is pulled back into either its original location or another similar location.  In other words, any material can be made to conduct if the electrical field is strong enough to dislodge it or if it absorbs sufficient energy from, say, a photon striking it.\nUp to this point, we’ve discussed Conductors and Insulators.  The real point of this discussion was to get to Semiconductors.  In a small band of the periodic table between the conductors and insulators, you’ll find a group of elements called the semiconductors.  The two most common of these, silicon and germanium, each have four valence electrons, which puts them in the middle between the metals (&lt;4) and the non-metals (&gt;4).  Thus, they exhibit characteristics which are neither metallic nor non-metallic.  They conduct more readily than non-metals, but they enter into covalent bonds with non-metals.  However, their electrons are not as tightly bound into covalent bonds as with typical non-metals, and can be relatively easily become free electrons.  The differences between Insulators, Conductors, and Semiconductors can be pictured using an Energy Diagram.\n\nA lot of energy is required to make an insulator conduct, i.e. to move its electrons out of the valence band into the conduction band as free electrons.  Almost no energy is required to move the electrons in a conductor, as there are already free electrons in the conduction band.  Semiconductors lie halfway between these extremes.\n\nDoped Semiconductor Materials\nSilicon is the most commonly-used semiconductor material, so we’ll focus on it as we move toward an understanding of how the diode works.  Silicon has four valence electrons, and is therefore Tetravalent.\nIn one of its natural conditions, silicon bonds covalently into a tetrahedral crystal structure.  A Lewis Diagram shows a flattened version of the bonds that take place.\n\nPure silicon is also called “Intrinsic silicon”, because it contains no other material than silicon atoms.  This is not only very difficult to achieve, but it also doesn’t bring us any closer to the answer as to how a diode works.  It is much more likely that a crystal of silicon will contain some impurities, and will therefore be “Extrinsic silicon”.  If the bulk of the impurity added to the silicon crystal is the same element, we refer to the result as “Doped silicon”.\n\nN-Type silicon\nIf a very small amount of a five-valence electron, or Pentavalent, dopant is introduced into a silicon crystal, the Pentavalent atoms will be forced into the crystal lattice structure of the silicon crystal, but only four of the electrons will be accepted into the covalent bonds.  That leaves the fifth one as a Free Electron, and, just in metal, this electron will be able to move in a current, making this doped crystal a conductor.  Since the pentavalent dopant has donated a negatively charged Carrier, the new material is referred to as N-Type Material.  The Pentavalent Dopant is referred to as a Donor.  The following Lewis Diagram shows a single Phosphorus atom trapped in a silicon crystal, and its resulting Free Electron.\n     \n\n\nP-Type silicon\nIf a very small amount of a three-valence electron, or Trivalent, dopant is introduced into a silicon crystal, the Trivalent atoms forced into the crystal will not be able to contribute an electron to all four of the surrounding silicon atoms, so there will be an orbital with only one electron in it.  This orbital has an electrical attraction to any available electrons which may temporarily “fall in”, so these are referred to as Holes.  If a source of electrons is connected to one end of the crystal and a positive potential is connected to the other end, electrons will migrate from hole to hole through the crystal, again resulting in a current.  Although the Holes are stationary, they appear to be moving in the opposite direction to the flow of electrons, so this is referred to as Hole Current.  The Trivalent Dopant provide places for electrons to fall into so it is called an Acceptor. The following Lewis Diagram shows a single Aluminum atom trapped in a silicon crystal, and its resulting hole.\n\nIn each of these types of material, it is still possible for electrons in covalent bonds to be ejected by sufficient incoming energy, but this small amount of current is only noticeable if there is little other current.  Consequently, the main form of current is referred to as Majority Current, and the current from the valence electrons is called Minority Current.   So, now we have two new conductive materials.  That still doesn’t answer the question of how the diode works.  The “magic” happens when we combine these two materials.\n\n\n\nThe P-N Junction\nNormally, when we connect two conductors together, we expect to just have a longer conductor.  However, when we bond P-Material to N-Material, we observe some very interesting behavior.  Here’s a block diagram to help with understanding what happens.\n\n\nRight at the connection point, or P-N Junction, the free electrons in the N-Type material are “pulled into” the holes in the P-Type material, in a process called “Recombination”.  That means, at the junction there are no charge carriers, therefore the P-N Junction in its natural state is a non-conductor.\nA net positive charge collects on the N-Type side and a net negative charge collects on the P-Type side of the barrier.  This results in a potential difference (voltage) referred to as the Barrier Potential.\n\nWhat an unexpected result!  Connecting two conductors together has created a non-conductor!\nLet’s investigate the Barrier Potential a bit more.  For silicon junctions, this barrier potential is between 0.5 V and 0.8 V.  Not very big!  In fact, a potential this small is easy to overcome.  Recall, from your Basic Electricity course, that in a circuit with two voltage sources in series, current will flow in the direction dictated by the larger source.  In other words, the bigger source overcomes the potential from the smaller source, and drives current “backwards” through it.\nIn essence, that’s what happens to the P-N Junction when we connect an opposing external voltage source to it.  To do this, we apply the positive side of the source to the P-Type material and the negative side to the N-Type material.  The negative side of the power supply drives electrons into the N-Type side of the junction, and the positive side of the power supply pulls electrons out of the holes in the P-Type material.  With carriers on both sides of the junction, it turns back into a conductor, and current flows.\nForward Biasing is the term used to describe applying an external power supply greater than the barrier potential to a P-N Junction with positive to the P-Type material and negative to the N-Type material.  Forward Biasing results in a flow of current through the junction.  The resistance of the junction will be very low.\nReverse Biasing is the opposite situation.  If an external power supply is applied with the negative side to the P-Type material and positive to the N-Type material, the positive side of the supply draws electrons away from the barrier on the N-Type side, and the negative side of the supply drives electrons into the holes in the P-Type material,widening the barrier and preventing the flow of current.  Since no current flows, the junction appears as an open circuit or a very high resistance, and the voltage across it will match the supply voltage.  In other words, the reverse-biased P-N Junction has a barrier potential essentially equal to the supply voltage.\nReverse Breakdown will occur if the power supply voltage is increased beyond the maximum voltage the P-N Junction can withstand.  At this point, the electrons cascade through the material as they would through a metal conductor, and the resistance becomes very low.  (Reverse Breakdown occurs at different voltages for each device, depending on the way the device has been constructed.)\nThermal Destruction happens very quickly in either the forward or reverse direction if the resulting current is too great.  Recall that P=I2R.  Even though the resistance is low, the squared current part of the calculation can result in a lot of power.\nCircuit Biasing involves placing current-limiting devices, usually resistors, in series with the P-N Junction to limit the current and thereby prevent Thermal Destruction.  Don’t put a P-N Junction directly across a power supply!  You must limit the current using Circuit Biasing!\n\n\nThe Diode\nA single P-N junction, wired with connections to the P-Type and N-Type material, is called a Diode.  Diodes come in lots of different shapes and varieties.  In your parts kit, you have Small Signal Diodes (used to control small currents, usually for logic or radio frequency applications), Rectifier Diodes (used for high-current and often high-voltage applications like power supplies), and Zener Diodes (designed with carefully-controlled Reverse Breakdown voltages for controlling voltages in regulated power supplies).\nThe symbol for a diode is shown below, along with a picture showing a typical diode and the way the polarity is indicated on the package.",
    "crumbs": [
      "Semiconductors",
      "Diodes",
      "Diode Physics & Models"
    ]
  },
  {
    "objectID": "semiconductors/section1/topic1/index.html#diode-models",
    "href": "semiconductors/section1/topic1/index.html#diode-models",
    "title": "Diode Physics & Models",
    "section": "Diode Models",
    "text": "Diode Models\nThe behavior of the diode in response to changing conditions in the biasing circuit is surprisingly complex, as shown in the oscilloscope X-Y trace below.\n\nThis particular diode is a Zener diode, designed with a specific Reverse Breakdown voltage of 5.6 V.  Notice the following:\n\nBetween approximately -5 V and +0.6 V, the current is essentially zero.  However, with higher resolution, we would actually see a small current, perhaps 500 nA, flowing because of the Minority Carriers in the silicon.\nAs we approach 0.7 V, the current increases in an approximately parabolic, or second order manner.\nBeyond this point, the current increases rapidly with very little change in voltage.  However, the voltage does increase slightly, indicating that the diode has an internal resistance.  Since V=IR, the slope of this section would be 1/R.\nAlso, as we approach -5.6 V, the current increases in the opposite direction, again in an approximately parabolic manner.\nBeyond this point, the current again increases rapidly with very little change in voltage.  Further analysis would indicate that the slope of this graph, again 1/R, would be quite similar to the slope at +0.7 V.\n\nThe condition described in #1 above is the off condition of the diode, where current is practically zero.  Most of it would be in the Reverse Biased region, but there is a small section that is technically forward biased but not with a high enough voltage to overcome the Barrier Potential.\nThe condition described in #3 above is the Forward Biased region, where the voltage remains relatively constant at approximately the Barrier Potential.\nThe condition described in #5 above is the Reverse Breakdown region.\n#2 is referred to as the Forward Knee, due to its rounded shape and sudden change in direction.\n#4 is referred to as the Reverse Knee for the same reasons.\nThis is quite unlike what we would expect to see for a passive component, such as the resistor.  This is the Characteristic “Curve” for a resistor:\n\nIn this case, a single expression describes the entire response of a resistor to a change in voltage:\n\\(‌I=(1/R)V\\), or simply Ohm’s Law.",
    "crumbs": [
      "Semiconductors",
      "Diodes",
      "Diode Physics & Models"
    ]
  },
  {
    "objectID": "semiconductors/section1/topic1/index.html#modelling",
    "href": "semiconductors/section1/topic1/index.html#modelling",
    "title": "Diode Physics & Models",
    "section": "Modelling",
    "text": "Modelling\nTo make sense of our world, we as humans “model” everything we see.  A model is a simplified description of a system or situation that can be used to predict future outcomes or to help us respond and control the system or situation.  Ohm’s Law is a model of the behavior of a resistor, and it is simplified in that it doesn’t take into account the effect of temperature on resistance, it doesn’t include the “skin” effect of high frequency changes in voltage on the resistance, it doesn’t take into account the inductance or capacitance of a physical resistive component, it doesn’t account for changes in resistance due to humidity or radiation, and it doesn’t tell us what happens if too much current is driven through the resistor.\nWhen it comes to diodes, our models typically ignore the parabolic regions at the Forward and Reverse Knees.\nThen, depending on how accurately we need to model the device, we may ignore other features:\n\nWe often don’t include the Reverse Breakdown region, as we assume our circuit will be biased to avoid this.\nWe often don’t include the slope of the Forward bias region, treating the diode as if its dynamic internal resistance is zero.\nWe may even overlook the fact that we need to overcome the Barrier Potential before the diode conducts.\n\n\nIdeal Model\nThis is the simplest model.  It just says a diode conducts when forward biased and doesn’t conduct when reverse biased – a polarity-controlled switch, if you wish.\n\n\n\nPractical Model\nThis one takes into account the Barrier Potential, which needs to be overcome before the diode can conduct.  Otherwise, it behaves like a zero-ohm switch.\n\n\n\nComplete Model\nThis one takes into account more of the actual characteristics, primarily the small internal resistance of the diode when it conducts and the small leakage current due to Minority Carriers.  Although the Knees are shown as parabolas, we usually don’t concern ourselves with that unless we have a good reason to.",
    "crumbs": [
      "Semiconductors",
      "Diodes",
      "Diode Physics & Models"
    ]
  },
  {
    "objectID": "semiconductors/section1/topic1/index.html#applying-models",
    "href": "semiconductors/section1/topic1/index.html#applying-models",
    "title": "Diode Physics & Models",
    "section": "Applying Models",
    "text": "Applying Models\nThe question is:  which model do I choose, when, and why?\nIn essence, it depends on how accurate the result needs to be and the circuit characteristics.\nIf all you care about is presence or absence of current (binary), use the Ideal Model. If you’re working with really large voltages, where 0.7 V is insignificant, and if the resistances are considerably greater than the diode’s dynamic internal resistance, just use the Ideal Model. If you’re working with small voltages and reasonable-sized resistors (like most of what we do in this course), use the Practical Model. If you’re working with large currents in Forward Biasing or really big resistors in Reverse Biasing, you’ll need the Complete Model to explain the otherwise-unexpected results you see.",
    "crumbs": [
      "Semiconductors",
      "Diodes",
      "Diode Physics & Models"
    ]
  },
  {
    "objectID": "semiconductors/section1/topic1/index.html#examples-diode-model-comparisons",
    "href": "semiconductors/section1/topic1/index.html#examples-diode-model-comparisons",
    "title": "Diode Physics & Models",
    "section": "Examples – Diode Model Comparisons",
    "text": "Examples – Diode Model Comparisons\nThe following examples the forward junction voltage is assumed to be 0.7 V, the internal resistance of the diode is assumed to be 5.9 ‌Ω, and the reverse leakage current is assumed to be 500 nA.  For each, the circuit current and the voltage across the diode (i.e. the voltage at the wire stub referenced to ground) are to be determined.\n\nExample 1:\n\nIdeal Model:\n\\(V_D = 0.0 V\\), since the closed switch is a short.\n\\(I = V_R/R = (6 - 0)/22 k‌Ω = 273 ‌μA\\)\nPractical Model:\n\\(V_D = 0.7 V\\)\n\\(I = V_R/R = (6 - 0.7)/22 k‌Ω = 241 ‌μA\\)\nComplete Model:\nWe’ll have to start with the current, using KVL:\n\\(I = (6.0 - 0.7)/(22 k‌Ω + 5.9 ‌Ω) = 241 ‌μA\\)\n\\(V_D = 0.7 + I * r'_D = 0.701 V\\)\nClearly, in this example, the Ideal Model is significantly incorrect, but the Practical and Complete models predict essentially the same result; so, for a situation in which the power supply is relatively small and the current is limited by a substantial series resistor, we don’t need to use the Complete Model.\n\n\nExample 2:\n\nIdeal Model:\n\\(V_D = 0.0 V\\), since the closed switch is a short.\n\\(I = V_R/R = (6 - 0)/120 ‌Ω = 50 mA\\)\nPractical Model:\n\\(V_D = 0.7 V\\)\n\\(I = V_R/R = (6 - 0.7)/120 ‌Ω = 44.2 mA\\)\nComplete Model:\nWe’ll have to start with the current, using KVL:\n\\(I = (6.0 - 0.7)/(120 ‌Ω + 5.9 ‌Ω) = 42.1 mA\\)\n\\(V_D = 0.7 + I * r'_D = 0.948 V\\)\nIn this example, the Ideal Model is significantly incorrect as in the previous example.  But now the Practical is also significantly incorrect, so a proper prediction can only be made using the Complete model.  So, for a situation in which the current is quite high as allowed by a relatively small series resistor, we need to use the Complete Model.\n\n\nExample 3:\n\nIdeal Model:\n\\(V_D = 0.0 V\\), since the closed switch is a short.\n\\(I = V_R/R = (90 - 0)/56 k‌Ω = 1.61 mA\\)\nPractical Model:\n\\(V_D = 0.7 V\\)\n\\(I = V_R/R = (90 - 0.7)/56 k‌Ω = 1.59 mA\\)\nComplete Model:\nWe’ll have to start with the current, using KVL:\n\\(I = (90 - 0.7)/(56 k‌Ω + 5.9 ‌Ω) = 1.59 mA\\)\n\\(V_D = 0.7 + I * r'_D = 0.709 V\\)\nIn this example, the currents predicted by all three models are practically the same, so the Ideal Model would be sufficient for current determination in a circuit where the supply voltage is considerably larger than the diode forward drop.  The voltage across the diode is, of course, still significantly wrong, but the voltage across the resistor (90 V instead of 89.3 V) is not significantly incorrect.\n\n\nExample 4:\n\nIdeal Model:\n\\(I = 0 A\\) because of the open circuit.\n\\(V_D = 12 V\\), since there is no current through the resistor, and therefore no voltage drop from the supply.\nPractical Model:\n\\(I = 0 A\\) because of the open circuit.\n\\(V_D = 12 V\\), since there is no current through the resistor, and therefore no voltage drop from the supply.\nComplete Model:\n\\(I = 500 nA\\)\n\\(V_D = 12 - I * R = 12 - 500 nA * 56 k‌Ω = 11.97 V\\)\nIn this case, the Ideal and Practical models predict the same result, so the Ideal model is suitable.  The Complete model also predicts almost the same result for the voltage, and 500 nA is pretty insignificant, so we don’t need the extra complication of the Complete model in a situation where the diode is reverse-biased and in series with a “reasonably sized” resistor.\n\n\nExample 5:\n\nIdeal Model:\n\\(I = 0 A\\) because of the open circuit.\n\\(V_D = 12 V\\), since there is no current through the resistor, and therefore no voltage drop from the supply.\nPractical Model:\n\\(I = 0 A\\) because of the open circuit.\n\\(V_D = 12 V\\), since there is no current through the resistor, and therefore no voltage drop from the supply.\nComplete Model:\n\\(I = 500 nA\\)\n\\(V_D = 12 - I * R = 12 - 500 nA * 10 M‌Ω = 7.00 V\\)\nIn this case, the Ideal and Practical models predict the same incorrect result, so the Complete model is the only one making accurate predictions.\nIn this situation, the very large series resistor introduces a significant voltage drop even with a seemingly insignificant leakage current.",
    "crumbs": [
      "Semiconductors",
      "Diodes",
      "Diode Physics & Models"
    ]
  },
  {
    "objectID": "semiconductors/section1/topic3/index.html",
    "href": "semiconductors/section1/topic3/index.html",
    "title": "Filtering & Regulation",
    "section": "",
    "text": "This group of notes will cover the theory needed for Lab 3 and Project 1\n\nFiltering and Fixed Linear Regulation Lesson Solutions Excel Spread Sheet\nPage 1 Filtering by Ross Taylor\nPage 2 Zener Regulation by Ross Taylor\nPage 3 Fixed Linear Regulation by Ross Taylor\nAdjustable Linear Regulation Lesson Solutions Excel Spread Sheet\nPage 4 Adjustable Linear Regulation by Ross Taylor",
    "crumbs": [
      "Semiconductors",
      "Diodes",
      "Filtering & Regulation"
    ]
  },
  {
    "objectID": "semiconductors/section2/topic2/index.html",
    "href": "semiconductors/section2/topic2/index.html",
    "title": "TPole & HBridge",
    "section": "",
    "text": "Lesson Solutions Excel Spread Sheet\nTotem Pole and H-Bridge Configurations by Ross Taylor",
    "crumbs": [
      "Semiconductors",
      "Transistors",
      "TPole & HBridge"
    ]
  },
  {
    "objectID": "semiconductors/section2/topic2/index.html#bjt-totem-pole-and-h-bridge-circuits",
    "href": "semiconductors/section2/topic2/index.html#bjt-totem-pole-and-h-bridge-circuits",
    "title": "TPole & HBridge",
    "section": "",
    "text": "Lesson Solutions Excel Spread Sheet\nTotem Pole and H-Bridge Configurations by Ross Taylor",
    "crumbs": [
      "Semiconductors",
      "Transistors",
      "TPole & HBridge"
    ]
  },
  {
    "objectID": "semiconductors/section2/topic4/index.html",
    "href": "semiconductors/section2/topic4/index.html",
    "title": "Project 3",
    "section": "",
    "text": "Oscillator Operation by Robbin Law",
    "crumbs": [
      "Semiconductors",
      "Transistors",
      "Project 3"
    ]
  },
  {
    "objectID": "semiconductors/section3/topic1/index.html",
    "href": "semiconductors/section3/topic1/index.html",
    "title": "Op Amps Intro",
    "section": "",
    "text": "Lesson Solutions Excel Spread Sheet\nPage 1 Intro to Op Amps by Ross Taylor\nPage 2 Op Amp Models by Ross Taylor\nPage 3 Op Amp Configurations by Ross Taylor\nDerivation of Gains by Robbin Law\nLM741 DataSheet\nLM1458 DataSheet\nLM324 DataSheet",
    "crumbs": [
      "Semiconductors",
      "Op Amps",
      "Op Amps Intro"
    ]
  },
  {
    "objectID": "semiconductors/section3/topic3/index.html",
    "href": "semiconductors/section3/topic3/index.html",
    "title": "Summing Amps",
    "section": "",
    "text": "Page 1 Summing Amplifiers by Ross Taylor\nPage 2 Summing Amplifiers by Ross Taylor\nPage 3 Summing Amplifiers by Ross Taylor\nPage 4 Summing Amplifiers by Ross Taylor",
    "crumbs": [
      "Semiconductors",
      "Op Amps",
      "Summing Amps"
    ]
  },
  {
    "objectID": "semiconductors/section3/topic5/index.html",
    "href": "semiconductors/section3/topic5/index.html",
    "title": "DtoA Conversion",
    "section": "",
    "text": "Page 1 Digital to Analog Conversion by Ross Taylor\nPage 2 Digital to Analog Conversion by Ross Taylor\nPage 3 Digital to Analog Conversion by Ross Taylor",
    "crumbs": [
      "Semiconductors",
      "Op Amps",
      "DtoA Conversion"
    ]
  }
]